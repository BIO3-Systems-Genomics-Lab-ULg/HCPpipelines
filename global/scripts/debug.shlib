#!/bin/echo This script should not run directly:

# Description:
#
#   Function for printing debugging information on caught errors.
#   It makes use of error trapping.
#
# Input:
#
#   $1 - line number
#   $2 - command ran
#   $3 - exit status

trap 'debug_on_error $LINENO "$BASH_COMMAND" $?' ERR

if [[ "$(type -t log_Err)" != "function" ]]
then
    source "$HCPPIPEDIR/global/scripts/log.shlib" "$@"
fi

if [ -z ${HCP_DEBUG_USETRAP} ] ; then
    HCP_DEBUG_USETRAP=ON
fi

if [ -z ${HCP_DEBUG_EXIT_ON_ERROR} ] ; then
    HCP_DEBUG_EXIT_ON_ERROR=ON
fi

if [ -z ${HCP_DEBUG_COLOR} ] ; then
    HCP_DEBUG_COLOR=FALSE
fi

if [ -z ${HCP_VERBOSE} ] ; then
    HCP_VERBOSE=FALSE
fi

# Description:
#
#   Function to turn on error trapping

debug_enable_trap()
{
    HCP_DEBUG_USETRAP=ON
}

# Description:
#
#   Function to turn off error trapping

debug_disable_trap()
{
    HCP_DEBUG_USETRAP=OFF
}

# Description:
#
#   Function to turn on exit upon error trap

debug_enable_exit()
{
    HCP_DEBUG_EXIT_ON_ERROR=ON
}

# Description:
#
#   Function to turn off exit upon error trap

debug_disable_exit()
{
    HCP_DEBUG_EXIT_ON_ERROR=OFF
}

# Description:
#
#   Function to turn on output coloring

debug_enable_color()
{
    HCP_DEBUG_COLOR=TRUE
}

# Description:
#
#   Function to turn off output coloring

debug_disable_color()
{
    HCP_DEBUG_COLOR=FALSE
}


# Description:
#
#   Function for printing red debug output.
#
# Input:
#
#   - text to be printed

debug_red_echo()
{   
    if [ "$HCP_DEBUG_COLOR" == "TRUE" ] ; then
        echo -e "\033[31m$*\033[0m"
    else
        echo "$*"
    fi
}


# Description:
#
#   Function for printing green debug output.
#
# Input:
#
#   - text to be printed

debug_green_echo()
{   
    if [ "$HCP_DEBUG_COLOR" == "TRUE" ] ; then
        echo -e "\033[32m$*\033[0m"
    else
        echo "$*"
    fi
}


# Description:
#
#   Function for printing blue debug output.
#
# Input:
#
#   - text to be printed

debug_blue_echo()
{   
    if [ "$HCP_DEBUG_COLOR" == "TRUE" ] ; then
        echo -e "\033[34m$*\033[0m"
    else
        echo "$*"
    fi
}

function debug_first()
{
    echo "$1"
}

debug_on_error()
{    
    if [ ! $HCP_DEBUG_USETRAP == 'OFF' ]; then        

        local me=`basename "$0"`
        local startreport=""
        local endreport=""
        local command=$(eval debug_first "$2")

        # --- output a regular HCP error log

        log_Err "'$command' command failed with return code: $3"

        # --- are we printing in color

        if [ "$HCP_DEBUG_COLOR" == "TRUE" ] ; then
           startreport="\033[33m"
           endreport="\033[0m"
        fi
        
        # --- output a detailed report if usetrap is not turned off    
        echo                                                               
        echo -e "${startreport}===> ERROR: Command returned with nonzero exit code"
        echo "---------------------------------------------------"
        echo "         script: $me"                                            
        echo "stopped at line: $1"                                    
        echo "           call: $2"
        echo "  expanded call: $(eval echo "$2")"                            
        echo "    exit status: $3"                                        
        echo -e "---------------------------------------------------${endreport}" 
        echo                                                               
        
        # --- check if ok to exit        
        if [ ! $HCP_DEBUG_EXIT_ON_ERROR == 'OFF' ]; then
            debug_red_echo "===> Aborting execution!"
            echo ""
            exit $3
        fi
    fi
}



# ============ VERBOSE functionality ==============


# Description:
#
#   Function to turn on verbose reporting

debug_enable_verbose()
{
    HCP_VERBOSE=TRUE
}

# Description:
#
#   Function to turn off verbose reporting

debug_disable_verbose()
{
    HCP_VERBOSE=FALSE
}


# Description:
#
#   Function for printing red verbose output.
#
# Input:
#
#   - text to be printed

verbose_red_echo()
{   
    if [ "$HCP_VERBOSE" == "TRUE" ] ; then
        debug_red_echo "$*"
    fi
}


# Description:
#
#   Function for printing green verbose output.
#
# Input:
#
#   - text to be printed

verbose_green_echo()
{   
    if [ "$HCP_VERBOSE" == "TRUE" ] ; then
        debug_green_echo "$*"
    fi
}


# Description:
#
#   Function for printing blue verbose output.
#
# Input:
#
#   - text to be printed

verbose_blue_echo()
{   
    if [ "$HCP_VERBOSE" == "TRUE" ] ; then
        debug_blue_echo "$*"
    fi
}


# Description:
#
#   Function for printing verbose output.
#
# Input:
#
#   - text to be printed

verbose_echo()
{   
    if [ "$HCP_VERBOSE" == "TRUE" ] ; then
        echo "$*"
    fi
}
